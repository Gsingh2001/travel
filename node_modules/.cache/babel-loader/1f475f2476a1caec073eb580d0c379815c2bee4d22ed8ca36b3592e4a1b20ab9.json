{"ast":null,"code":"var _jsxFileName = \"G:\\\\com-project\\\\travel\\\\src\\\\context\\\\TodoContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport { json, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/createContext();\nexport const TodoProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [message, setMessage] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [allTasks, setAllTasks] = useState();\n  const [latestTask, setLatestTask] = useState();\n  const [recentTask, setRecentTask] = useState([]);\n  const navigate = useNavigate();\n\n  //register new user\n  const registerUser = async formData => {\n    const obj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    const checkUser = await fetch(`http://localhost:5000/users?email=${formData.email}`, {\n      method: \"GET\"\n    });\n    const user = await checkUser.json();\n    if (user.length > 0) {\n      setMessage(\"user already exist\");\n    } else {\n      const response = await fetch(`http://localhost:5000/users`, obj);\n      const currentUser = await response.json();\n      if (response.ok) {\n        setMessage(\"User Regsitered\");\n        localStorage.setItem(\"user\", JSON.stringify(currentUser));\n        setUser({\n          username: currentUser.username,\n          id: currentUser.id,\n          email: currentUser.email\n        });\n        setTimeout(() => {\n          navigate('/task-list');\n        }, 3000);\n      } else {\n        setMessage(\"something went wrong\");\n      }\n    }\n  };\n\n  //login user\n  const loginUser = async formData => {\n    const response = await fetch(`http://localhost:5000/users?email=${formData.email}&password=${formData.password}`, {\n      method: \"GET\"\n    });\n    if (response.ok) {\n      const checkUser = await response.json();\n      if (checkUser.length > 0) {\n        setMessage(\"Logged in successfully\");\n        localStorage.setItem(\"user\", JSON.stringify(checkUser[0]));\n        setUser({\n          username: checkUser[0].username,\n          id: checkUser[0].id,\n          email: checkUser[0].email\n        });\n        setTimeout(() => {\n          navigate('/task-list');\n        }, 3000);\n      } else {\n        setMessage(\"Email/Password mismatch\");\n      }\n    } else {\n      setMessage(\"Please try again\");\n    }\n  };\n\n  // create Task function\n  const createTask = async formData => {\n    const obj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    const response = await fetch(`http://localhost:5000/tasks`, obj);\n    if (response.ok) {\n      setMessage(\"Task created successfully\");\n      getTasks();\n    } else {\n      setMessage(\"Something went wrong\");\n    }\n  };\n\n  // update task\n\n  const updateTask = async formData => {\n    const obj = {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    const response = await fetch(`http://localhost:5000/tasks/${formData.id}`, obj);\n    if (response.ok) {\n      setMessage(\"Task Updated successfully\");\n      getTasks();\n    } else {\n      setMessage(\"Something went wrong\");\n    }\n  };\n\n  // getTasks\n\n  const getTasks = async () => {\n    console.log(\"getTask executed\");\n    const response = await fetch(`http://localhost:5000/tasks?userId=${user.id}`, {\n      method: \"GET\"\n    });\n    if (response.ok) {\n      const tasks = await response.json();\n      setAllTasks(tasks);\n      const latest = tasks[tasks.length - 1];\n      setLatestTask(latest);\n      const recent = tasks.slice(-3);\n      setRecentTask(recent);\n    }\n  };\n  const deleteTask = async id => {\n    const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    if (response.ok) {\n      setMessage(\"Task deleted successfully\");\n    } else {\n      setMessage(\"something went wrong\");\n    }\n  };\n  useEffect(() => {\n    const localUser = localStorage.getItem('user');\n    const currentUser = JSON.parse(localUser);\n    if (currentUser) {\n      setUser(currentUser);\n    }\n  }, []);\n\n  // {\n  //   username: checkUser[0].username,\n  //   id: checkUser[0].id,\n  //   email: checkUser[0].email,\n  //  isLoggedIn\n  // }\n\n  useEffect(() => {\n    if (user != null) {\n      getTasks();\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: {\n      message,\n      setMessage,\n      registerUser,\n      loginUser,\n      user,\n      setUser,\n      createTask,\n      allTasks,\n      latestTask,\n      recentTask,\n      updateTask,\n      deleteTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n_s(TodoProvider, \"k8f2Rc5n9wzCipL7mvC7YSerqfY=\", false, function () {\n  return [useNavigate];\n});\n_c = TodoProvider;\nexport default TodoContext;\nvar _c;\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","json","useNavigate","jsxDEV","_jsxDEV","TodoContext","TodoProvider","_ref","_s","children","message","setMessage","user","setUser","allTasks","setAllTasks","latestTask","setLatestTask","recentTask","setRecentTask","navigate","registerUser","formData","obj","method","headers","body","JSON","stringify","checkUser","fetch","email","length","response","currentUser","ok","localStorage","setItem","username","id","setTimeout","loginUser","password","createTask","getTasks","updateTask","console","log","tasks","latest","recent","slice","deleteTask","localUser","getItem","parse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["G:/com-project/travel/src/context/TodoContext.js"],"sourcesContent":["import { createContext, useEffect, useState } from  \"react\";\nimport { json, useNavigate } from \"react-router-dom\";\n\nconst TodoContext = createContext();\n\nexport const TodoProvider =({children})=>{\n    const [message, setMessage] = useState(\"\");\n    const [user, setUser] = useState(null);\n\n    const [allTasks, setAllTasks] = useState();\n    const [latestTask, setLatestTask] = useState();\n    const [recentTask, setRecentTask] = useState([]);\n\n    const navigate = useNavigate();\n\n\n    //register new user\n    const registerUser = async(formData)=>{\n        const obj = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(formData),\n          };\n          const checkUser = await fetch(\n            `http://localhost:5000/users?email=${formData.email}`,\n            { method: \"GET\" }\n          );\n          const user = await checkUser.json();\n          if (user.length > 0) {\n            setMessage(\"user already exist\");\n          } else {\n            const response = await fetch(`http://localhost:5000/users`, obj);            \n            const currentUser = await response.json();\n            if (response.ok) {              \n              setMessage(\"User Regsitered\");\n              localStorage.setItem(\"user\", JSON.stringify(currentUser));\n              setUser({\n                username: currentUser.username,\n                id: currentUser.id,\n                email: currentUser.email\n              })\n              setTimeout(()=>{\n                navigate('/task-list');  \n              }, 3000)\n              \n            } else {\n              setMessage(\"something went wrong\");\n            }\n          }\n    }\n\n    //login user\n    const loginUser = async(formData)=>{\n        const response = await fetch(`http://localhost:5000/users?email=${formData.email}&password=${formData.password}`, {method: \"GET\"});\n        if(response.ok){\n            const checkUser =await response.json();\n            if(checkUser.length > 0){\n                setMessage(\"Logged in successfully\");\n                localStorage.setItem(\"user\", JSON.stringify(checkUser[0]));\n              setUser({\n                username: checkUser[0].username,\n                id: checkUser[0].id,\n                email: checkUser[0].email\n              })\n              setTimeout(()=>{\n                navigate('/task-list');  \n              }, 3000)\n            }\n            else{\n                setMessage(\"Email/Password mismatch\");\n            }\n        }\n        else{\n            setMessage(\"Please try again\");\n        }\n    }\n\n    // create Task function\n    const createTask = async(formData)=>{\n      const obj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      }\n\n      const response = await fetch(`http://localhost:5000/tasks`, obj);\n      if(response.ok){\n        setMessage(\"Task created successfully\");\n        getTasks();\n      }else{\n        setMessage(\"Something went wrong\");\n      }\n    }\n\n    // update task\n\n    const updateTask = async(formData)=>{\n      const obj = {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      }\n\n      const response = await fetch(`http://localhost:5000/tasks/${formData.id}`, obj);\n      if(response.ok){\n        setMessage(\"Task Updated successfully\");\n        getTasks();\n      }else{\n        setMessage(\"Something went wrong\");\n      }\n    }\n\n\n    // getTasks\n\n    const getTasks = async()=>{\n      console.log(\"getTask executed\");\n      const response =await fetch(`http://localhost:5000/tasks?userId=${user.id}`, {method: \"GET\"})\n      if(response.ok){\n        const tasks = await response.json();\n        setAllTasks(tasks);\n        const latest = tasks[tasks.length-1];\n        setLatestTask(latest);\n        const recent = tasks.slice(-3);\n        setRecentTask(recent);\n      }\n    }\n\n    const deleteTask = async(id)=>{\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {method: 'DELETE'});\n      if(response.ok){\n        setMessage(\"Task deleted successfully\");\n      }else{\n        setMessage(\"something went wrong\");\n      }\n    }\n\n \n\n\n    useEffect(()=>{\n      const localUser = localStorage.getItem('user');\n      const currentUser = JSON.parse(localUser);\n      if(currentUser){\n        setUser(currentUser); \n      }\n    }, [])\n\n    // {\n    //   username: checkUser[0].username,\n    //   id: checkUser[0].id,\n    //   email: checkUser[0].email,\n    //  isLoggedIn\n    // }\n\n    useEffect(()=>{\n      if(user != null){\n        getTasks();\n      }      \n    }, [user])\n\n\n\n    return(\n        <TodoContext.Provider value={{\n            message,\n            setMessage,\n            registerUser,\n            loginUser,\n            user,\n            setUser,\n            createTask,\n            allTasks,\n            latestTask,\n            recentTask,\n            updateTask,\n            deleteTask\n        }}>\n            {children}\n        </TodoContext.Provider>\n    )\n}\n\nexport default TodoContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}